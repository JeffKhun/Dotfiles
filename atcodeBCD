#include <iostream>
#include <string>
#include <algorithm>
#include <cstring>
using namespace std;

int ltree[26], rtree[26];
int main() {
    int n;
    cin>>n;
    string s;
    cin>>s;
    memset(ltree, 0, sizeof(ltree));
    memset(rtree, 0, sizeof(rtree));
    ++ltree[s[0]-'a'];
    for (int i=1; i<n; ++i) ++rtree[s[i]-'a'];
    int ans=0;
    if (rtree[s[0]-'a']) ans=1;
    for (int i=1; i<n; ++i) {
        ++ltree[s[i]-'a'];
        --rtree[s[i]-'a'];
        int cnt=0;
        for (int j=0; j<26; ++j)
            if (ltree[j] && rtree[j])
                ++cnt;
        ans=max(ans, cnt);
    }
    cout<<ans<<endl;
    return 0;
}

================================

#include <iostream>
#include <string>
#include <algorithm>
#include <cstring>
#include <climits>
using namespace std;

int ltree[2], rtree[2];
int main() {
    int n;
    cin>>n;
    string s;
    cin>>s;
    memset(ltree, 0, sizeof(ltree));
    memset(rtree, 0, sizeof(rtree));
    for (int i=1; i<n; ++i)
        if (s[i]=='E') ++rtree[0];
        else ++rtree[1];
    int ans=rtree[0];
    for (int i=1; i<n; ++i) {
        if (s[i-1]=='E') ++ltree[0];
        else ++ltree[1];
        if (s[i]=='E') --rtree[0];
        else --rtree[1];
        ans=min(ans, ltree[1]+rtree[0]);
    }
    cout<<ans<<endl;
    return 0;
}

===========================

#include <iostream>
#include <string>
#include <algorithm>
#include <cstring>
#include <climits>
#include <vector>
using namespace std;

typedef long long ll;
int main() {
    int n;
    cin>>n;
    vector<ll> v(n);
    vector<vector<ll>> dp1(n, vector<ll>(n));
    vector<vector<ll>> dp2(n, vector<ll>(n));
    for (int i=0; i<n; ++i) cin>>v[i];
    int ans=n;
    for (int i=0; i<n; ++i) dp1[i][i]=dp2[i][i]=v[i];
    for (int t=1; t<n; ++t)
        for (int i=0, j=t; j<n; ++i, ++j) {
            dp1[i][j]=dp1[i][j-1]+v[j];
            dp2[i][j]=dp2[i][j-1]|v[j];
            if (dp1[i][j]==dp2[i][j]) ++ans;
        }
    cout<<ans<<endl;
    return 0;
}
